Metadata-Version: 2.1
Name: PINN-BGK
Version: 0.1.0
Summary: Proyecto Final: Optimización y Control en Redes Distribuidas
Author: Cristian Peña
Author-email: cpenav@unal.edu.co
Classifier: Programming Language :: Python :: 3
Classifier: Operating System :: OS Independent
Requires-Python: >=3.8
Description-Content-Type: text/markdown

# PINN-BGK Solver

Este proyecto implementa un método de redes neuronales informadas por la física (PINN) para resolver la ecuación de Burgers en el contexto de Optimización y Control en Redes Distribuidas.

## Descripción

El paquete **PINN-BGK** utiliza PyTorch para entrenar un modelo basado en una red MLP, integrando técnicas de early stopping, visualización de métricas y guardado de resultados (modelo, estadísticas y gráficos). La configuración se centraliza en un archivo YAML para facilitar su modificación sin alterar el código fuente.

## Instalación

1. **Clonar el repositorio** a tu máquina.
2. **Acceder a la carpeta del proyecto**:
   ```bash
   cd "D:/Personal/Area de Trabajo/Universidad/Matriculas/Novena/Optimización y Control en Redes Distribuidas/Proyecto Final/code"
   ```
3. **Instalar el proyecto en modo editable**:
   ```bash
   pip install -e .
   ```

## Requerimientos

Consulta el archivo [requirements.txt](requirements.txt) para conocer las dependencias principales, que incluyen:
- PyTorch, torchvision y torchaudio
- NumPy, SciPy, scikit-learn, pandas
- Matplotlib, seaborn
- PyYAML, tqdm
- y otras herramientas de desarrollo y calidad de código

## Modos de Operación

El framework soporta tres modos principales de operación, todos configurables a través del archivo YAML:

### 1. Entrenamiento del Modelo

```bash
PINN-BGK --mode train
```

Este modo entrena un modelo PINN utilizando los hiperparámetros definidos en la sección `model` y `training` del archivo de configuración. El proceso incluye:

- Carga de datos de entrenamiento
- Inicialización del modelo con la arquitectura especificada
- Entrenamiento con early stopping
- Generación de gráficos de métricas (pérdida, precisión)
- Visualización de la solución predicha vs. real
- Guardado del modelo entrenado y estadísticas

### 2. Generación de Datos Sintéticos

```bash
PINN-BGK --mode generate
```

Este modo genera datos sintéticos para diferentes ecuaciones y escenarios físicos:

- **Ecuación de Burgers 1D**: Genera la solución analítica
- **Flujo de Kovasznay**: Implementa la solución para el flujo estacionario de Navier-Stokes
- **Vórtice de Taylor-Green**: Simula un vórtice que decae con el tiempo
- **Flujo en Cavidad**: Implementa la simulación del flujo en una cavidad con tapa móvil

Cada generación produce archivos .mat con datos y un informe JSON detallado con metadatos.

### 3. Evaluación de Modelos

```bash
PINN-BGK --mode evaluate
```

Este modo evalúa un modelo previamente entrenado con datos específicos:

- Carga el modelo desde la ruta especificada
- Evalúa el modelo con los datos proporcionados
- Calcula métricas (MAE, MSE, RMSE, R2)
- Genera visualizaciones comparativas
- Produce un mapa de calor de errores
- Guarda los resultados detallados en formato JSON

## Uso de Configuración Personalizada

Puedes proporcionar una configuración personalizada mediante:

```bash
PINN-BGK --mode [modo] --config ruta/a/configuracion.yaml
```

## Estructura del Proyecto

```
Proyecto Final/
├── code/
│   ├── config/
│   │   └── config.yaml         # Configuración centralizada para todos los modos
│   ├── requirements.txt        # Requerimientos de Python
│   ├── README.md               # Este archivo
│   ├── setup.py                # Configuración del paquete e entry point
│   ├── src/
│   │   ├── __init__.py         # Permite tratar src como un paquete
│   │   ├── main.py             # Entry point del proyecto con modos de operación
│   │   ├── data_handlers/      # Manejo de datos y generación
│   │   │   ├── data_loader.py  # Cargador de datos
│   │   │   ├── fluid_data_generator.py # Generador de datos de fluidos
│   │   │   └── generators/     # Implementaciones específicas de generadores
│   │   ├── model/
│   │   │   └── train.py        # Clase Trainer para entrenamiento
│   │   ├── utils/
│   │   │   ├── data_loader.py  # Utilidades para carga de datos
│   │   │   ├── visualization.py # Funciones para visualización
│   │   │   └── device_utils.py # Utilidades para dispositivos (CPU/GPU)
│   │   └── structure_model/
│   │       └── pinn_structure_v1.py # Definición del modelo PINN
└── data/
    ├── training/               # Datos para entrenamiento
    │   └── burgers_shock_mu_01_pi.mat
    ├── synthetic/              # Datos generados sintéticamente
    └── evaluation/             # Resultados de evaluación
```

## Archivo de Configuración YAML

El archivo `config.yaml` se organiza en secciones para cada modo de operación:

### Modelo y Entrenamiento

```yaml
model:
  type: "mlp"
  layers: [2, 50, 50, 50, 50, 1]
  activation_function: "Tanh"
  learning_rate: 0.001

training:
  epochs: 100
  batch_size: 32
  epochs_no_improve: 20
  min_loss_improvement: 1e-5
  seed: 42
  memory_limit_gb: 4
```

### Parámetros Físicos

```yaml
physics:
  nu: 0.01
  boundary_type: "dirichlet"
  physics_type: "burgers"
```

### Generación de Datos

```yaml
data_generation:
  type: "burgers"  # Opciones: burgers, kovasznay, taylor_green, lid_driven_cavity
  spatial_points: 256
  time_points: 100
  # Parámetros específicos
  Re: 40               # Para Kovasznay
  U0: 1.0              # Para flujos
  resolution: 32       # Para mallas
  Nx: 32               # Para mallas 2D
  Ny: 32               # Para mallas 2D
  T: 2.0               # Tiempo total
  num_steps: 50        # Pasos temporales
```

### Evaluación de Modelos

```yaml
evaluation:
  model_path: "output/Model_mlp_1_0.001_42/model/weights_model.pth"
  data_path: "data/training/burgers_shock_mu_01_pi.mat"
  output_folder: "evaluation_results"
  metrics: ["MAE", "MSE", "RMSE", "R2"]
  visualize: true
  compare_with_analytical: false
```

## Logs y Resultados

- Todos los modos generan logs detallados del proceso.
- Los resultados de entrenamiento se guardan en carpetas organizadas.
- La generación de datos incluye metadatos y estadísticas en JSON.
- Las evaluaciones producen métricas y visualizaciones comparativas.

## Extensibilidad

El framework está diseñado para ser fácilmente extensible:
- Nuevos generadores de datos pueden añadirse en `data_handlers/generators/`
- Nuevas arquitecturas de modelos pueden implementarse extendiendo las clases base
- Los parámetros físicos pueden modificarse sin cambiar el código

## Notas Adicionales

- Se recomienda la instalación editable para actualizar automáticamente el entorno tras modificar el código.
- Las visualizaciones se guardan automáticamente en las carpetas correspondientes al tipo de ejecución.
- Para experimentos rápidos, se pueden reducir los parámetros de entrenamiento en la configuración.

## Citación
@software{pena2023pinnbgk,
  author = {Pe{\~n}a, Cristian},
  title = {{PINN-BGK-Solver}: Un Framework para la Resolución de Ecuaciones Diferenciales con PINN},
  year = {2023},
  url = {https://github.com/CristianPe1/PINN-BGK-Solver},
  version = {1.0.0},
  organization = {Universidad Nacional de Colombia}
}

## Licencia
